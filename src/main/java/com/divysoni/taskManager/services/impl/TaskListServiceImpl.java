package com.divysoni.taskManager.services.impl;

import com.divysoni.taskManager.entities.TaskList;
import com.divysoni.taskManager.repo.TaskListRepo;
import com.divysoni.taskManager.services.TaskListService;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

@Service
public class TaskListServiceImpl implements TaskListService {

    @Autowired
    private TaskListRepo taskListRepo;

    @Override
    public List<TaskList> listTaskList() {
        return taskListRepo.findAll();
    }

    @Override
    public TaskList createTaskList(TaskList taskList) {
        if(null != taskList.getId()) {
            throw new IllegalArgumentException("TaskList already has an Id!");
        }
        if(null == taskList.getTitle() || taskList.getTitle().isBlank()) {
            throw new IllegalArgumentException("TaskList has invalid Title!");
        }

        LocalDateTime nowTime = LocalDateTime.now();
        return taskListRepo.save(new TaskList(
                null, // because id is autogenerated
                taskList.getTitle(),
                taskList.getDescription(),
                null, // no tasks in the list for now
                nowTime, // created
                nowTime // updated
        ));
    }

    @Override
    public Optional<TaskList> getTaskList(UUID id) {
        return taskListRepo.findById(id);
    }

    @Transactional
    @Override
    public TaskList updateTaskList(UUID taskListId, TaskList newTaskList) {
        // the new taskList must have id because it is already in the database any we only want to update
        if(null == newTaskList.getId()) {
            throw new IllegalArgumentException("TaskList must have an Id!");
        }
        // if newTaskList and given id doesn't match then user is trying to edit some other taskList
        if(!Objects.equals(newTaskList.getId(), taskListId)) {
            throw new IllegalArgumentException("Updating some other taskList is not permitted!");
        }

        TaskList oldTaskList = taskListRepo.findById(taskListId).orElseThrow(
                () -> new IllegalArgumentException("TaskList Not found")
        );

        LocalDateTime nowTime = LocalDateTime.now();
        oldTaskList.setTitle(newTaskList.getTitle() != null ? newTaskList.getTitle() : oldTaskList.getTitle());
        oldTaskList.setDescription(newTaskList.getDescription()!= null ? newTaskList.getDescription() : oldTaskList.getDescription());
        oldTaskList.setUpdated(newTaskList.getUpdated()!= null ? nowTime : oldTaskList.getUpdated());

        return taskListRepo.save(oldTaskList);
    }

    @Override
    public void deleteTaskList(UUID taskListId) {
        taskListRepo.deleteById(taskListId);
    }
}
